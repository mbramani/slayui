{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-230",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/button.json",
    "https://originui.com/r/command.json",
    "https://originui.com/r/label.json",
    "https://originui.com/r/popover.json"
  ],
  "files": [
    {
      "path": "registry/default/components/comp-230.tsx",
      "content": "\"use client\"\n\nimport { useId, useState } from \"react\"\nimport { CheckIcon, ChevronDownIcon, PlusIcon } from \"lucide-react\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/registry/default/ui/command\"\nimport { Label } from \"@/registry/default/ui/label\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/default/ui/popover\"\n\nconst organizations = [\n  {\n    value: \"originui\",\n    label: \"Origin UI\",\n  },\n  {\n    value: \"cruip\",\n    label: \"Cruip\",\n  },\n]\n\nexport default function Component() {\n  const id = useId()\n  const [open, setOpen] = useState<boolean>(false)\n  const [value, setValue] = useState<string>(\"originui\")\n\n  return (\n    <div className=\"*:not-first:mt-2\">\n      <Label htmlFor={id}>Select with search and button</Label>\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            id={id}\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"bg-background hover:bg-background border-input w-full justify-between px-3 font-normal outline-offset-0 outline-none focus-visible:outline-[3px]\"\n          >\n            <span className={cn(\"truncate\", !value && \"text-muted-foreground\")}>\n              {value\n                ? organizations.find(\n                    (organization) => organization.value === value\n                  )?.label\n                : \"Select organization\"}\n            </span>\n            <ChevronDownIcon\n              size={16}\n              className=\"text-muted-foreground/80 shrink-0\"\n              aria-hidden=\"true\"\n            />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          className=\"border-input w-full min-w-[var(--radix-popper-anchor-width)] p-0\"\n          align=\"start\"\n        >\n          <Command>\n            <CommandInput placeholder=\"Find organization\" />\n            <CommandList>\n              <CommandEmpty>No organization found.</CommandEmpty>\n              <CommandGroup>\n                {organizations.map((organization) => (\n                  <CommandItem\n                    key={organization.value}\n                    value={organization.value}\n                    onSelect={(currentValue) => {\n                      setValue(currentValue === value ? \"\" : currentValue)\n                      setOpen(false)\n                    }}\n                  >\n                    {organization.label}\n                    {value === organization.value && (\n                      <CheckIcon size={16} className=\"ml-auto\" />\n                    )}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n              <CommandSeparator />\n              <CommandGroup>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start font-normal\"\n                >\n                  <PlusIcon\n                    size={16}\n                    className=\"-ms-2 opacity-60\"\n                    aria-hidden=\"true\"\n                  />\n                  New organization\n                </Button>\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "label",
      "select",
      "command",
      "combobox",
      "popover",
      "search",
      "autocomplete",
      "radix"
    ]
  }
}