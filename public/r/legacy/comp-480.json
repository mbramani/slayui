{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-480",
  "type": "registry:component",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "https://originui.com/r/button.json",
    "https://originui.com/r/dropdown-menu.json",
    "https://originui.com/r/table.json"
  ],
  "files": [
    {
      "path": "registry/default/components/comp-480.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport {\n  Column,\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  SortingState,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { ArrowLeftToLine, ArrowRightToLine, Ellipsis, PinOff } from \"lucide-react\";\nimport { CSSProperties, useEffect, useState } from \"react\";\n\ntype Item = {\n  id: string;\n  name: string;\n  email: string;\n  location: string;\n  flag: string;\n  status: \"Active\" | \"Inactive\" | \"Pending\";\n  balance: number;\n  department: string;\n  role: string;\n  joinDate: string;\n  lastActive: string;\n  performance: \"Good\" | \"Very Good\" | \"Excellent\" | \"Outstanding\";\n};\n\n// Helper function to compute pinning styles for columns\nconst getPinningStyles = (column: Column<Item>): CSSProperties => {\n  const isPinned = column.getIsPinned();\n  return {\n    left: isPinned === \"left\" ? `${column.getStart(\"left\")}px` : undefined,\n    right: isPinned === \"right\" ? `${column.getAfter(\"right\")}px` : undefined,\n    position: isPinned ? \"sticky\" : \"relative\",\n    width: column.getSize(),\n    zIndex: isPinned ? 1 : 0,\n  };\n};\n\nconst columns: ColumnDef<Item>[] = [\n  {\n    header: \"Name\",\n    accessorKey: \"name\",\n    cell: ({ row }) => <div className=\"truncate font-medium\">{row.getValue(\"name\")}</div>,\n  },\n  {\n    header: \"Email\",\n    accessorKey: \"email\",\n  },\n  {\n    header: \"Location\",\n    accessorKey: \"location\",\n    cell: ({ row }) => (\n      <div className=\"truncate\">\n        <span className=\"text-lg leading-none\">{row.original.flag}</span> {row.getValue(\"location\")}\n      </div>\n    ),\n  },\n  {\n    header: \"Status\",\n    accessorKey: \"status\",\n  },\n  {\n    header: \"Balance\",\n    accessorKey: \"balance\",\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"balance\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n      return formatted;\n    },\n  },\n  {\n    header: \"Department\",\n    accessorKey: \"department\",\n  },\n  {\n    header: \"Role\",\n    accessorKey: \"role\",\n  },\n  {\n    header: \"Join Date\",\n    accessorKey: \"joinDate\",\n  },\n  {\n    header: \"Last Active\",\n    accessorKey: \"lastActive\",\n  },\n  {\n    header: \"Performance\",\n    accessorKey: \"performance\",\n  },\n];\n\nexport default function Component() {\n  const [data, setData] = useState<Item[]>([]);\n  const [sorting, setSorting] = useState<SortingState>([]);\n\n  useEffect(() => {\n    async function fetchPosts() {\n      const res = await fetch(\n        \"https://res.cloudinary.com/dlzlfasou/raw/upload/users-01_fertyx.json\",\n      );\n      const data = await res.json();\n      setData(data.slice(0, 5)); // Limit to 5 items\n    }\n    fetchPosts();\n  }, []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    columnResizeMode: \"onChange\",\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: setSorting,\n    state: {\n      sorting,\n    },\n    enableSortingRemoval: false,\n  });\n\n  return (\n    <div>\n      <Table\n        className=\"table-fixed border-separate border-spacing-0 [&_td]:border-border [&_tfoot_td]:border-t [&_th]:border-b [&_th]:border-border [&_tr:not(:last-child)_td]:border-b [&_tr]:border-none\"\n        style={{\n          width: table.getTotalSize(),\n        }}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id} className=\"bg-muted/50\">\n              {headerGroup.headers.map((header) => {\n                const { column } = header;\n                const isPinned = column.getIsPinned();\n                const isLastLeftPinned = isPinned === \"left\" && column.getIsLastColumn(\"left\");\n                const isFirstRightPinned = isPinned === \"right\" && column.getIsFirstColumn(\"right\");\n\n                return (\n                  <TableHead\n                    key={header.id}\n                    className=\"relative h-10 truncate border-t [&:not([data-pinned]):has(+[data-pinned])_div.cursor-col-resize:last-child]:opacity-0 [&[data-last-col=left]_div.cursor-col-resize:last-child]:opacity-0 [&[data-pinned=left][data-last-col=left]]:border-r [&[data-pinned=right]:last-child_div.cursor-col-resize:last-child]:opacity-0 [&[data-pinned=right][data-last-col=right]]:border-l [&[data-pinned][data-last-col]]:border-border [&[data-pinned]]:bg-muted/90 [&[data-pinned]]:backdrop-blur-sm\"\n                    colSpan={header.colSpan}\n                    style={{ ...getPinningStyles(column) }}\n                    data-pinned={isPinned || undefined}\n                    data-last-col={\n                      isLastLeftPinned ? \"left\" : isFirstRightPinned ? \"right\" : undefined\n                    }\n                  >\n                    <div className=\"flex items-center justify-between gap-2\">\n                      <span className=\"truncate\">\n                        {header.isPlaceholder\n                          ? null\n                          : flexRender(header.column.columnDef.header, header.getContext())}\n                      </span>\n                      {/* Pin/Unpin column controls with enhanced accessibility */}\n                      {!header.isPlaceholder &&\n                        header.column.getCanPin() &&\n                        (header.column.getIsPinned() ? (\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"-mr-1 size-7 shadow-none\"\n                            onClick={() => header.column.pin(false)}\n                            aria-label={`Unpin ${header.column.columnDef.header as string} column`}\n                            title={`Unpin ${header.column.columnDef.header as string} column`}\n                          >\n                            <PinOff\n                              className=\"opacity-60\"\n                              size={16}\n                              strokeWidth={2}\n                              aria-hidden=\"true\"\n                            />\n                          </Button>\n                        ) : (\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                className=\"-mr-1 size-7 shadow-none\"\n                                aria-label={`Pin options for ${header.column.columnDef.header as string} column`}\n                                title={`Pin options for ${header.column.columnDef.header as string} column`}\n                              >\n                                <Ellipsis\n                                  className=\"opacity-60\"\n                                  size={16}\n                                  strokeWidth={2}\n                                  aria-hidden=\"true\"\n                                />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem onClick={() => header.column.pin(\"left\")}>\n                                <ArrowLeftToLine\n                                  size={16}\n                                  strokeWidth={2}\n                                  className=\"opacity-60\"\n                                  aria-hidden=\"true\"\n                                />\n                                Stick to left\n                              </DropdownMenuItem>\n                              <DropdownMenuItem onClick={() => header.column.pin(\"right\")}>\n                                <ArrowRightToLine\n                                  size={16}\n                                  strokeWidth={2}\n                                  className=\"opacity-60\"\n                                  aria-hidden=\"true\"\n                                />\n                                Stick to right\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        ))}\n                      {header.column.getCanResize() && (\n                        <div\n                          {...{\n                            onDoubleClick: () => header.column.resetSize(),\n                            onMouseDown: header.getResizeHandler(),\n                            onTouchStart: header.getResizeHandler(),\n                            className:\n                              \"absolute top-0 h-full w-4 cursor-col-resize user-select-none touch-none -right-2 z-10 flex justify-center before:absolute before:w-px before:inset-y-0 before:bg-border before:-translate-x-px\",\n                          }}\n                        />\n                      )}\n                    </div>\n                  </TableHead>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n                {row.getVisibleCells().map((cell) => {\n                  const { column } = cell;\n                  const isPinned = column.getIsPinned();\n                  const isLastLeftPinned = isPinned === \"left\" && column.getIsLastColumn(\"left\");\n                  const isFirstRightPinned =\n                    isPinned === \"right\" && column.getIsFirstColumn(\"right\");\n\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      className=\"truncate [&[data-pinned=left][data-last-col=left]]:border-r [&[data-pinned=right][data-last-col=right]]:border-l [&[data-pinned][data-last-col]]:border-border [&[data-pinned]]:bg-background/90 [&[data-pinned]]:backdrop-blur-sm\"\n                      style={{ ...getPinningStyles(column) }}\n                      data-pinned={isPinned || undefined}\n                      data-last-col={\n                        isLastLeftPinned ? \"left\" : isFirstRightPinned ? \"right\" : undefined\n                      }\n                    >\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n      <p className=\"mt-4 text-center text-sm text-muted-foreground\">\n        Pinnable columns made with{\" \"}\n        <a\n          className=\"underline hover:text-foreground\"\n          href=\"https://tanstack.com/table\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          TanStack Table\n        </a>\n      </p>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "table",
      "tanstack",
      "flag",
      "sticky",
      "resize"
    ],
    "colSpan": 3
  }
}