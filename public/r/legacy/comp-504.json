{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-504",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/button.json",
    "https://originui.com/r/calendar.json",
    "https://originui.com/r/collapsible.json",
    "https://originui.com/r/scroll-area.json"
  ],
  "files": [
    {
      "path": "registry/default/components/comp-504.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Calendar } from \"@/registry/default/ui/calendar\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/registry/default/ui/collapsible\";\nimport { ScrollArea } from \"@/registry/default/ui/scroll-area\";\nimport {\n  eachMonthOfInterval,\n  eachYearOfInterval,\n  endOfYear,\n  format,\n  isAfter,\n  isBefore,\n  startOfYear,\n} from \"date-fns\";\nimport { ChevronDown } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { CaptionLabelProps, MonthGridProps } from \"react-day-picker\";\n\nexport default function Component() {\n  const today = new Date();\n  const [month, setMonth] = useState(today);\n  const [date, setDate] = useState<Date | undefined>(today);\n  const [isYearView, setIsYearView] = useState(false);\n  const startDate = new Date(1980, 6);\n  const endDate = new Date(2030, 6);\n\n  const years = eachYearOfInterval({\n    start: startOfYear(startDate),\n    end: endOfYear(endDate),\n  });\n\n  return (\n    <div>\n      <Calendar\n        mode=\"single\"\n        selected={date}\n        onSelect={setDate}\n        month={month}\n        onMonthChange={setMonth}\n        defaultMonth={new Date()}\n        startMonth={startDate}\n        endMonth={endDate}\n        className=\"overflow-hidden rounded-lg border border-border p-2\"\n        classNames={{\n          month_caption: \"ms-2.5 me-20 justify-start\",\n          nav: \"justify-end\",\n        }}\n        components={{\n          CaptionLabel: (props: CaptionLabelProps) => (\n            <CaptionLabel isYearView={isYearView} setIsYearView={setIsYearView} {...props} />\n          ),\n          MonthGrid: (props: MonthGridProps) => {\n            return (\n              <MonthGrid\n                className={props.className}\n                isYearView={isYearView}\n                setIsYearView={setIsYearView}\n                startDate={startDate}\n                endDate={endDate}\n                years={years}\n                currentYear={month.getFullYear()}\n                currentMonth={month.getMonth()}\n                onMonthSelect={(selectedMonth: Date) => {\n                  setMonth(selectedMonth);\n                  setIsYearView(false);\n                }}\n              >\n                {props.children}\n              </MonthGrid>\n            );\n          },\n        }}\n      />\n      <p\n        className=\"mt-4 text-center text-xs text-muted-foreground\"\n        role=\"region\"\n        aria-live=\"polite\"\n      >\n        Advanced selection -{\" \"}\n        <a\n          className=\"underline hover:text-foreground\"\n          href=\"https://daypicker.dev/\"\n          target=\"_blank\"\n          rel=\"noopener nofollow\"\n        >\n          React DayPicker\n        </a>\n      </p>\n    </div>\n  );\n}\n\nfunction MonthGrid({\n  className,\n  children,\n  isYearView,\n  startDate,\n  endDate,\n  years,\n  currentYear,\n  currentMonth,\n  onMonthSelect,\n}: {\n  className?: string;\n  children: React.ReactNode;\n  isYearView: boolean;\n  setIsYearView: React.Dispatch<React.SetStateAction<boolean>>;\n  startDate: Date;\n  endDate: Date;\n  years: Date[];\n  currentYear: number;\n  currentMonth: number;\n  onMonthSelect: (date: Date) => void;\n}) {\n  const currentYearRef = useRef<HTMLDivElement>(null);\n  const currentMonthButtonRef = useRef<HTMLButtonElement>(null);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (isYearView && currentYearRef.current && scrollAreaRef.current) {\n      const viewport = scrollAreaRef.current.querySelector(\n        \"[data-radix-scroll-area-viewport]\",\n      ) as HTMLElement;\n      if (viewport) {\n        const yearTop = currentYearRef.current.offsetTop;\n        viewport.scrollTop = yearTop;\n      }\n      setTimeout(() => {\n        currentMonthButtonRef.current?.focus();\n      }, 100);\n    }\n  }, [isYearView]);\n\n  return (\n    <div className=\"relative\">\n      <table className={className}>{children}</table>\n      {isYearView && (\n        <div className=\"absolute inset-0 z-20 -mx-2 -mb-2 bg-background\">\n          <ScrollArea ref={scrollAreaRef} className=\"h-full\">\n            {years.map((year) => {\n              const months = eachMonthOfInterval({\n                start: startOfYear(year),\n                end: endOfYear(year),\n              });\n              const isCurrentYear = year.getFullYear() === currentYear;\n\n              return (\n                <div key={year.getFullYear()} ref={isCurrentYear ? currentYearRef : undefined}>\n                  <CollapsibleYear title={year.getFullYear().toString()} open={isCurrentYear}>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      {months.map((month) => {\n                        const isDisabled = isBefore(month, startDate) || isAfter(month, endDate);\n                        const isCurrentMonth =\n                          month.getMonth() === currentMonth && year.getFullYear() === currentYear;\n\n                        return (\n                          <Button\n                            key={month.getTime()}\n                            ref={isCurrentMonth ? currentMonthButtonRef : undefined}\n                            variant={isCurrentMonth ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            className=\"h-7\"\n                            disabled={isDisabled}\n                            onClick={() => onMonthSelect(month)}\n                          >\n                            {format(month, \"MMM\")}\n                          </Button>\n                        );\n                      })}\n                    </div>\n                  </CollapsibleYear>\n                </div>\n              );\n            })}\n          </ScrollArea>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction CaptionLabel({\n  children,\n  isYearView,\n  setIsYearView,\n}: {\n  isYearView: boolean;\n  setIsYearView: React.Dispatch<React.SetStateAction<boolean>>;\n} & React.HTMLAttributes<HTMLSpanElement>) {\n  return (\n    <Button\n      className=\"-ms-2 flex items-center gap-2 text-sm font-medium hover:bg-transparent data-[state=open]:text-muted-foreground/80 [&[data-state=open]>svg]:rotate-180\"\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={() => setIsYearView((prev) => !prev)}\n      data-state={isYearView ? \"open\" : \"closed\"}\n    >\n      {children}\n      <ChevronDown\n        size={16}\n        strokeWidth={2}\n        className=\"shrink-0 text-muted-foreground/80 transition-transform duration-200\"\n        aria-hidden=\"true\"\n      />\n    </Button>\n  );\n}\n\nfunction CollapsibleYear({\n  title,\n  children,\n  open,\n}: {\n  title: string;\n  children: React.ReactNode;\n  open?: boolean;\n}) {\n  return (\n    <Collapsible className=\"border-t border-border px-2 py-1.5\" defaultOpen={open}>\n      <CollapsibleTrigger asChild>\n        <Button\n          className=\"flex w-full justify-start gap-2 text-sm font-medium hover:bg-transparent [&[data-state=open]>svg]:rotate-180\"\n          variant=\"ghost\"\n          size=\"sm\"\n        >\n          <ChevronDown\n            size={16}\n            strokeWidth={2}\n            className=\"shrink-0 text-muted-foreground/80 transition-transform duration-200\"\n            aria-hidden=\"true\"\n          />\n          {title}\n        </Button>\n      </CollapsibleTrigger>\n      <CollapsibleContent className=\"overflow-hidden px-3 py-1 text-sm transition-all data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down\">\n        {children}\n      </CollapsibleContent>\n    </Collapsible>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "calendar",
      "date",
      "collapsible",
      "react daypicker",
      "radix"
    ],
    "style": 1
  }
}