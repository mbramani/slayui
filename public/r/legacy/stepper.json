{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stepper",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/default/ui/stepper.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/registry/default/lib/utils\";\nimport { Check, LoaderCircle } from \"lucide-react\";\nimport * as React from \"react\";\nimport { createContext, useContext } from \"react\";\n\n// Types\ntype StepperContextValue = {\n  activeStep: number;\n  setActiveStep: (step: number) => void;\n  orientation: \"horizontal\" | \"vertical\";\n};\n\ntype StepItemContextValue = {\n  step: number;\n  state: StepState;\n  isDisabled: boolean;\n  isLoading: boolean;\n};\n\ntype StepState = \"active\" | \"completed\" | \"inactive\" | \"loading\";\n\n// Contexts\nconst StepperContext = createContext<StepperContextValue | undefined>(undefined);\nconst StepItemContext = createContext<StepItemContextValue | undefined>(undefined);\n\nconst useStepper = () => {\n  const context = useContext(StepperContext);\n  if (!context) {\n    throw new Error(\"useStepper must be used within a Stepper\");\n  }\n  return context;\n};\n\nconst useStepItem = () => {\n  const context = useContext(StepItemContext);\n  if (!context) {\n    throw new Error(\"useStepItem must be used within a StepperItem\");\n  }\n  return context;\n};\n\n// Components\ninterface StepperProps extends React.HTMLAttributes<HTMLDivElement> {\n  defaultValue?: number;\n  value?: number;\n  onValueChange?: (value: number) => void;\n  orientation?: \"horizontal\" | \"vertical\";\n}\n\nconst Stepper = React.forwardRef<HTMLDivElement, StepperProps>(\n  (\n    { defaultValue = 0, value, onValueChange, orientation = \"horizontal\", className, ...props },\n    ref,\n  ) => {\n    const [activeStep, setInternalStep] = React.useState(defaultValue);\n\n    const setActiveStep = React.useCallback(\n      (step: number) => {\n        if (value === undefined) {\n          setInternalStep(step);\n        }\n        onValueChange?.(step);\n      },\n      [value, onValueChange],\n    );\n\n    const currentStep = value ?? activeStep;\n\n    return (\n      <StepperContext.Provider\n        value={{\n          activeStep: currentStep,\n          setActiveStep,\n          orientation,\n        }}\n      >\n        <div\n          ref={ref}\n          className={cn(\n            \"group/stepper inline-flex data-[orientation=horizontal]:w-full data-[orientation=horizontal]:flex-row data-[orientation=vertical]:flex-col\",\n            className,\n          )}\n          data-orientation={orientation}\n          {...props}\n        />\n      </StepperContext.Provider>\n    );\n  },\n);\nStepper.displayName = \"Stepper\";\n\n// StepperItem\ninterface StepperItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  step: number;\n  completed?: boolean;\n  disabled?: boolean;\n  loading?: boolean;\n}\n\nconst StepperItem = React.forwardRef<HTMLDivElement, StepperItemProps>(\n  (\n    { step, completed = false, disabled = false, loading = false, className, children, ...props },\n    ref,\n  ) => {\n    const { activeStep } = useStepper();\n\n    const state: StepState =\n      completed || step < activeStep ? \"completed\" : activeStep === step ? \"active\" : \"inactive\";\n\n    const isLoading = loading && step === activeStep;\n\n    return (\n      <StepItemContext.Provider value={{ step, state, isDisabled: disabled, isLoading }}>\n        <div\n          ref={ref}\n          className={cn(\n            \"group/step flex items-center group-data-[orientation=horizontal]/stepper:flex-row group-data-[orientation=vertical]/stepper:flex-col\",\n            className,\n          )}\n          data-state={state}\n          {...(isLoading ? { \"data-loading\": true } : {})}\n          {...props}\n        >\n          {children}\n        </div>\n      </StepItemContext.Provider>\n    );\n  },\n);\nStepperItem.displayName = \"StepperItem\";\n\n// StepperTrigger\ninterface StepperTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean;\n}\n\nconst StepperTrigger = React.forwardRef<HTMLButtonElement, StepperTriggerProps>(\n  ({ asChild = false, className, children, ...props }, ref) => {\n    const { setActiveStep } = useStepper();\n    const { step, isDisabled } = useStepItem();\n\n    if (asChild) {\n      return <div className={className}>{children}</div>;\n    }\n\n    return (\n      <button\n        ref={ref}\n        className={cn(\n          \"inline-flex items-center gap-3 disabled:pointer-events-none disabled:opacity-50\",\n          className,\n        )}\n        onClick={() => setActiveStep(step)}\n        disabled={isDisabled}\n        {...props}\n      >\n        {children}\n      </button>\n    );\n  },\n);\nStepperTrigger.displayName = \"StepperTrigger\";\n\n// StepperIndicator\ninterface StepperIndicatorProps extends React.HTMLAttributes<HTMLDivElement> {\n  asChild?: boolean;\n}\n\nconst StepperIndicator = React.forwardRef<HTMLDivElement, StepperIndicatorProps>(\n  ({ asChild = false, className, children, ...props }, ref) => {\n    const { state, step, isLoading } = useStepItem();\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"relative flex size-6 shrink-0 items-center justify-center rounded-full bg-muted text-xs font-medium text-muted-foreground data-[state=active]:bg-primary data-[state=completed]:bg-primary data-[state=active]:text-primary-foreground data-[state=completed]:text-primary-foreground\",\n          className,\n        )}\n        data-state={state}\n        {...props}\n      >\n        {asChild ? (\n          children\n        ) : (\n          <>\n            <span className=\"transition-all group-data-[loading=true]/step:scale-0 group-data-[state=completed]/step:scale-0 group-data-[loading=true]/step:opacity-0 group-data-[state=completed]/step:opacity-0 group-data-[loading=true]/step:transition-none\">\n              {step}\n            </span>\n            <Check\n              className=\"absolute scale-0 opacity-0 transition-all group-data-[state=completed]/step:scale-100 group-data-[state=completed]/step:opacity-100\"\n              size={16}\n              strokeWidth={2}\n              aria-hidden=\"true\"\n            />\n            {isLoading && (\n              <span className=\"absolute transition-all\">\n                <LoaderCircle\n                  className=\"animate-spin\"\n                  size={14}\n                  strokeWidth={2}\n                  aria-hidden=\"true\"\n                />\n              </span>\n            )}\n          </>\n        )}\n      </div>\n    );\n  },\n);\nStepperIndicator.displayName = \"StepperIndicator\";\n\n// StepperTitle\nconst StepperTitle = React.forwardRef<HTMLHeadingElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => (\n    <h3 ref={ref} className={cn(\"text-sm font-medium\", className)} {...props} />\n  ),\n);\nStepperTitle.displayName = \"StepperTitle\";\n\n// StepperDescription\nconst StepperDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\n));\nStepperDescription.displayName = \"StepperDescription\";\n\n// StepperSeparator\nconst StepperSeparator = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"m-0.5 bg-muted group-data-[orientation=horizontal]/stepper:h-0.5 group-data-[orientation=vertical]/stepper:h-12 group-data-[orientation=horizontal]/stepper:w-full group-data-[orientation=vertical]/stepper:w-0.5 group-data-[orientation=horizontal]/stepper:flex-1 group-data-[state=completed]/step:bg-primary\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nStepperSeparator.displayName = \"StepperSeparator\";\n\nexport {\n  Stepper,\n  StepperDescription,\n  StepperIndicator,\n  StepperItem,\n  StepperSeparator,\n  StepperTitle,\n  StepperTrigger,\n};\n",
      "type": "registry:ui"
    }
  ]
}