{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "comp-482",
  "type": "registry:component",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "https://originui.com/r/badge.json",
    "https://originui.com/r/button.json",
    "https://originui.com/r/checkbox.json",
    "https://originui.com/r/table.json"
  ],
  "files": [
    {
      "path": "registry/default/components/comp-482.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/registry/default/lib/utils\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\";\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { ChevronDown, ChevronUp, Info } from \"lucide-react\";\nimport { Fragment, useEffect, useState } from \"react\";\n\ntype Item = {\n  id: string;\n  name: string;\n  email: string;\n  location: string;\n  flag: string;\n  status: \"Active\" | \"Inactive\" | \"Pending\";\n  balance: number;\n  note?: string;\n};\n\nconst columns: ColumnDef<Item>[] = [\n  {\n    id: \"expander\",\n    header: () => null,\n    cell: ({ row }) => {\n      return row.getCanExpand() ? (\n        <Button\n          {...{\n            className: \"size-7 shadow-none text-muted-foreground\",\n            onClick: row.getToggleExpandedHandler(),\n            \"aria-expanded\": row.getIsExpanded(),\n            \"aria-label\": row.getIsExpanded()\n              ? `Collapse details for ${row.original.name}`\n              : `Expand details for ${row.original.name}`,\n            size: \"icon\",\n            variant: \"ghost\",\n          }}\n        >\n          {row.getIsExpanded() ? (\n            <ChevronUp className=\"opacity-60\" size={16} strokeWidth={2} aria-hidden=\"true\" />\n          ) : (\n            <ChevronDown className=\"opacity-60\" size={16} strokeWidth={2} aria-hidden=\"true\" />\n          )}\n        </Button>\n      ) : undefined;\n    },\n  },\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n  },\n  {\n    header: \"Name\",\n    accessorKey: \"name\",\n    cell: ({ row }) => <div className=\"font-medium\">{row.getValue(\"name\")}</div>,\n  },\n  {\n    header: \"Email\",\n    accessorKey: \"email\",\n  },\n  {\n    header: \"Location\",\n    accessorKey: \"location\",\n    cell: ({ row }) => (\n      <div>\n        <span className=\"text-lg leading-none\">{row.original.flag}</span> {row.getValue(\"location\")}\n      </div>\n    ),\n  },\n  {\n    header: \"Status\",\n    accessorKey: \"status\",\n    cell: ({ row }) => (\n      <Badge\n        className={cn(\n          row.getValue(\"status\") === \"Inactive\" && \"bg-muted-foreground/60 text-primary-foreground\",\n        )}\n      >\n        {row.getValue(\"status\")}\n      </Badge>\n    ),\n  },\n  {\n    header: () => <div className=\"text-right\">Balance</div>,\n    accessorKey: \"balance\",\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"balance\"));\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n      return <div className=\"text-right\">{formatted}</div>;\n    },\n  },\n];\n\nexport default function Component() {\n  const [data, setData] = useState<Item[]>([]);\n\n  useEffect(() => {\n    async function fetchPosts() {\n      const res = await fetch(\n        \"https://res.cloudinary.com/dlzlfasou/raw/upload/users-01_fertyx.json\",\n      );\n      const data = await res.json();\n      setData(data.slice(0, 5)); // Limit to 5 items\n    }\n    fetchPosts();\n  }, []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    getRowCanExpand: (row) => Boolean(row.original.note),\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n  });\n\n  return (\n    <div>\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id} className=\"hover:bg-transparent\">\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(header.column.columnDef.header, header.getContext())}\n                  </TableHead>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <Fragment key={row.id}>\n                <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell\n                      key={cell.id}\n                      className=\"whitespace-nowrap [&:has([aria-expanded])]:w-px [&:has([aria-expanded])]:py-0 [&:has([aria-expanded])]:pr-0\"\n                    >\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n                {row.getIsExpanded() && (\n                  <TableRow>\n                    <TableCell colSpan={row.getVisibleCells().length}>\n                      <div className=\"flex items-start py-2 text-primary/80\">\n                        <span\n                          className=\"me-3 mt-0.5 flex w-7 shrink-0 justify-center\"\n                          aria-hidden=\"true\"\n                        >\n                          <Info className=\"opacity-60\" size={16} strokeWidth={2} />\n                        </span>\n                        <p className=\"text-sm\">{row.original.note}</p>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </Fragment>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n      <p className=\"mt-4 text-center text-sm text-muted-foreground\">\n        Expanding sub-row made with{\" \"}\n        <a\n          className=\"underline hover:text-foreground\"\n          href=\"https://tanstack.com/table\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          TanStack Table\n        </a>\n      </p>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "table",
      "tanstack",
      "checkbox",
      "collapsible",
      "flag",
      "badge",
      "chip"
    ],
    "colSpan": 3
  }
}